---
title: "Halloween_Mini_Project"
author: "Vina Nguyen"
format: html
editor: visual
---

## Halloween Mini-Project

In this project, we will explore FiveThirtyEight's Halloween Candy dataset.

## 1. Importing Candy Data

```{r}
candy <- read.csv('candy-data.csv', row.names=1) 
head(candy)
```

> -   **Q1**. How many different candy types are in this dataset?

```{r}
# number of different candy types based on rows
nrow(candy)
```

> -   **Q2**. How many fruity candy types are in the dataset?

```{r}
# total sum for each colum
colSums(candy)
```

There are 38 fruity candy types.

## 2. What is your favorite candy?

One of the most interesting variables in the dataset is `winpercent`. For a given candy this value is the percentage of people who prefer this candy over another randomly chosen candy from the dataset. Higher values indicate a more popular candy.

```{r}
# winpercent value for Twix
candy["Twix", ]$winpercent 
```

> -   **Q3**. What is your favorite candy in the dataset and what is it's `winpercent` value?

```{r}
candy["Skittles original", ]$winpercent 
```

> -   **Q4**. What is the `winpercent` value for "Kit Kat"?

```{r}
candy["Kit Kat", ]$winpercent 
```

> -   **Q5**. What is the `winpercent` value for "Tootsie Roll Snack Bars"?

```{r}
candy["Tootsie Roll Snack Bars", ]$winpercent 
```

**Side-note**: the skimr::skim() function

There is a useful `skim()` function in the **skimr** package that can help give you a quick overview of a given dataset. Let's install this package and try it on our candy data.

```{r}
library("skimr")
skim(candy)

```

> -   **Q6**. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset.

Chocolate and candy are on a different scale than the majority of the other columns.

> -   **Q7**. What do you think a zero and one represent for the `candy$chocolate` column?

zero is the sum of NA and NULL (i.e. missing) values.\
one is the sum of not NA and NULL (i.e. missing values.

A good place to start any exploratory analysis is with a histogram. You can do this most easily with the base R function `hist()`. Alternatively, you can use `ggplot()` with `geom_hist()`. Either works well in this case and (as always) its your choice.

> -   **Q8**. Plot a histogram of `winpercent` values

```{r}
hist(candy$winpercent)
```

> -   **Q9**. Is the distribution of `winpercent` values symmetrical?

No.

```{r}
mean(candy$winpercent)
median(candy$winpercent)
```

> -   **Q10**. Is the center of the distribution above or below 50%?

Below.

> -   **Q11**. On average is chocolate candy higher or lower ranked than fruit candy?

Chocolate is higher ranked with a winpercent mean of 60.92 compared to fruity with a winpercent mean of 44.12.

```{r}
# use logical vectors to access the coresponding candy rows
candy_chocolate <- candy$winpercent[as.logical(candy$chocolate)]
candy_fruity <- candy$winpercent[as.logical(candy$fruity)]

mean(candy_chocolate)
mean(candy_fruity)
```

> -   **Q12**. Is this difference statistically significant?

Yes since p-value, 2.214e-08, is less than the 0.05 level of significance.

```{r}
# two sample t-test for chocolate and fruity
t.test(candy_chocolate, candy_fruity, var.equal = TRUE)


```

## 3. Overall Candy Rankings

> -   **Q13**. What are the five least liked candy types in this set?

```{r}
# using dplyr package
library(dplyr)
candy %>% arrange(winpercent) %>% head(5)

# using base R package
head(candy[order(candy$winpercent),], n=5)
```

> -   **Q14**. What are the top 5 all time favorite candy types out of this set?

```{r}
candy %>% arrange(winpercent) %>% tail(5)
```

To examine more of the dataset in this vain we can make a barplot to visualize the overall rankings.

> -   **Q15**. Make a first barplot of candy ranking based on `winpercent` values.

```{r}
library(ggplot2)

ggplot(candy) +
  aes(winpercent, rownames(candy)) +
   geom_bar(stat="identity", width=0.5)
```

> -   **Q16**. This is quite ugly, use the `reorder()` function to get the bars sorted by `winpercent`?

```{r}
ggplot(candy) +
  aes(winpercent, reorder(rownames(candy), winpercent)) +
   geom_bar(stat="identity", width=0.5)
```

Let's setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.

```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

Now let's try our barplot with these colors. Note that we use `fill=my_cols` for `geom_col()`. Experement to see what happens if you use `col=mycols`.

```{r}
ggplot(candy) + 
  aes(winpercent, reorder(rownames(candy),winpercent)) +
  geom_col(fill=my_cols)
```

> -   **Q17**. What is the worst ranked chocolate candy?

Sixlets.

> -   **Q18**. What is the best ranked fruity candy?

Starbursts.

## 4. Taking a look at Pricepercent

What about value for money? What is the the best candy for the least money? One way to get at this would be to make a plot of `winpercent` vs the `pricepercent` variable.

To this plot we will add text labels so we can more easily identify a given candy. There is a regular `geom_label()` that comes with ggplot2. However, as there are quite a few candys in our dataset lots of these labels will be overlapping and hard to read. To help with this we can use the `geom_text_repel()` function from the **ggrepel** package.

```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

> -   **Q19**. Which candy type is the highest ranked in terms of `winpercent` for the least money - i.e. offers the most bang for your buck?

Chocolate candy.

> -   **Q20**. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
ord
```

## 5. Exploring the Correlation Structure

We'll use correlation and view the results with the **corrplot** package to plot a correlation matrix.

```{r}
library(corrplot)
```

```{r}
cij <- cor(candy)
corrplot(cij)
```

> -   **Q22**. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

Chocolate fruity.

> -   **Q23**. Similarly, what two variables are most positively correlated?

Chocolate bar.

## 6. Principal Component Analysis

Let's apply PCA using the `prcom()` function to our candy dataset remembering to set the `scale=TRUE` argument.

```{r}
pca <- prcomp(candy, scale=TRUE)
summary(pca)
```

Now we can plot our main PCA score plot of PC1 vs PC2.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

We can change the plotting character and add some color:

```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)
```

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)

p
```

Again we can use the **ggrepel** package and the function `ggrepel::geom_text_repel()` to label up the plot with non overlapping candy names like. We will also add a title and subtitle like so:

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```

If you want to see more candy labels you can change the `max.overlaps` value to allow more overlapping labels or pass the ggplot object `p` to **plotly** like so to generate an interactive plot that you can mouse over to see labels:

```{r}
library(plotly)
```

```{r}
ggplotly(p)
```

```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```

> -   **Q24**. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

Fruity, hard and pluribus. Use this makes sense because most fruity candy are hard and packaged in a bag or box of multiple candies.
